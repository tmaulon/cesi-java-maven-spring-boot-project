package com.hello.controllers;

import com.hello.models.Client;
import com.hello.models.CompteCourant;
import com.hello.repositories.ClientRepository;
import com.hello.repositories.CompteCourantRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/clients") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called clientRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;
    @Autowired
    private CompteCourantRepository compteCourantRepository;

    //<editor-fold desc="POST New Client">
    // Post new client
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewClient (@RequestParam String nom
            , @RequestParam String prenom, @RequestParam String identifiant, @RequestParam List<CompteCourant> compteCourants) {
        // @ResponseBody means the returned String is the response, not a view nom
        // @RequestParam means it is a parameter from the GET or POST request

        Client n = new Client(
                nom, identifiant, prenom
        );
        clientRepository.save(n);
        return "Saved";
    }
    //</editor-fold>

    //<editor-fold desc="GET All clients">
    // get all clients
    @GetMapping(path="/all")
    public @ResponseBody Iterable<Client> getAllClients() {
        // This returns a JSON or XML with the users
        return clientRepository.findAll();
    }
    //</editor-fold>

    //<editor-fold desc="GET Client by id">
    // Get client by id
    @GetMapping(path="/client/{id}")
    public @ResponseBody Client getClient(@PathVariable(value="id") Integer id) throws NoSuchElementException {
        Optional<Client> clientOptional = clientRepository.findById(id);
        clientOptional.orElseThrow(() -> new NoSuchElementException("No client found with id " + id));
        return clientOptional.get();
    }
    //</editor-fold>

    //<editor-fold desc="DELETE Client by id">
    // Delete client by id
    @DeleteMapping(path="/delete/client/{id}")
    public @ResponseBody
    String deleteClient(@PathVariable(value="id") Integer id) {
        try {
            clientRepository.deleteById(id);
            return "Client with id " + id + " has been removed";
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("We can't remove client because no client found with id : " + id);
        }
    }
    //</editor-fold>

    //<editor-fold desc="UPDATE client">
    // Update Client by id
    @PatchMapping("/update/client/{id}")
    public @ResponseBody Client updateClient(Client client, @PathVariable(value="id") Integer id, @RequestParam(value="nom") String nom, @RequestParam(value="prenom") String prenom, @RequestParam(value="identifiant") String identifiant, @RequestParam(value = "compteCourant") List<CompteCourant> compteCourants ) throws NoSuchElementException {
        Optional<Client> clientOptional = clientRepository.findById(id);
        clientOptional.orElseThrow(() -> new NoSuchElementException("No client found with id " + id));
        if (client.getNom() != null) {
            clientOptional.get().setNom(nom);
        }
        if (client.getPrenom() != null) {
            clientOptional.get().setPrenom(prenom);
        }
        if (client.getIdentifiant() != null) {
            clientOptional.get().setIdentifiant(identifiant);
        }
        if (client.getCompteCourants() != null) {
            clientOptional.get().setCompteCourants(compteCourants);
        }
        clientRepository.save(clientOptional.get());
        return client;
    }
    //</editor-fold>

    //<editor-fold desc="POST New Compte courant by Client Id">
    // Post compte courant for a client id
    /*@PostMapping(path="/client/{id}/compte-courants/add")
    public @ResponseBody String addNewClientCheckingAccount (@PathVariable(value="id") Integer id, @RequestParam String numero
            , @RequestParam String intitule, @RequestParam double solde, @RequestParam double montantDecouvertAutorise) throws NoSuchElementException {

        Optional<Client> clientOptional = clientRepository.findById(id);
        clientOptional.orElseThrow(() -> new NoSuchElementException("No client found with id " + id));

        CompteCourant cc = new CompteCourant(numero, intitule, solde, montantDecouvertAutorise);
        compteCourantRepository.save(cc);
        if (clientOptional.get().getCompteCourants() != null) {
            clientOptional.get().setCompteCourants(cc);
        }
        clientRepository.save(clientOptional.get());
        return "Le client : " + clientOptional.get().getPrenom() + " " + clientOptional.get().getNom() + " saved ClientCheckingAccount => " + cc;
    }*/
    //</editor-fold>

    //<editor-fold desc="GET All Comptes Courant by Client Id">
    // get checking account by client id
    @GetMapping(path="client/{id}/compte-courants/all")
    public @ResponseBody
    String getClientCheckingAccounts(@PathVariable(value="id") Integer id) throws NoSuchElementException  {
        Optional<Client> clientOptional = clientRepository.findById(id);
        clientOptional.orElseThrow(() -> new NoSuchElementException("No client found with id " + id));

        List<CompteCourant> comptesCourants = new ArrayList<>();

        if (clientOptional.get().getCompteCourants() != null)
        {
            comptesCourants.addAll(clientOptional.get().getCompteCourants());
            List<String> s = new ArrayList<>();
            comptesCourants.forEach(
                    compteCourant -> {
                        s.add("Compte courant du client " + compteCourant.getClient().getPrenom() + " " + compteCourant.getClient().getNom() + " est : " + compteCourant.getIntitule() + ", avec le numéro : " + compteCourant.getNumero() + ", il contient : " + compteCourant.getSolde() + " et a un découvert autrorisé de : " + compteCourant.getMontantDecouvertAutorise() + ".");
                    }
            );
            String str = String.join("\n", s);
            return str;

        }
        else
        {
            return "Le client " + id + " n'a pas de compte courant.";
        }
    }
    //</editor-fold>

}
